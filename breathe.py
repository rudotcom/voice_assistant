""" –î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Ç–æ–¥—É –í–∏–º–∞ –•–æ—Ñ–∞. –ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞—É–Ω–¥–æ–≤ –ø–æ 30 –≤–¥–æ—Ö–æ–≤. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –æ—Ç
–≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥–æ–π –î–∞–≤–∞–π –ø–æ–¥—ã—à–∏–º 4 —Ä–∞—É–Ω–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 —Ä–∞—É–Ω–¥–∞) """
import sys
import time
from math import sqrt
import APIKeysLocal  # –ª–æ–∫–∞–ª—å–Ω–æ —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–ª—é—á–∏ –∏ –ø–∞—Ä–æ–ª–∏
import pymorphy2
import pyglet
import pymysql
import pyttsx3
import threading
import warnings
import pytils
from pynput import mouse
from va_assistant import assistant

warnings.filterwarnings("ignore")

""" –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤, –≤–¥–æ—Ö–æ–≤ –≤ —Ä–∞—É–Ω–¥–µ, –∑–∞–¥–µ—Ä–∂–∫–∞ –¥—ã—Ö–∞–Ω–∏—è –Ω–∞ –≤–¥–æ—Ö–µ"""


def listen_mouse_click():
    with mouse.Listener(on_click=on_click) as listener:
        listener.join()


def on_move(x, y):
    cursor = workout.mouse_coords
    if cursor == (0, 0):
        workout.mouse_coords = (x, y)
        return True
    if int(sqrt(abs(cursor[0] - x) + abs(cursor[1] - y))) > 20:
        return False


def on_click(x, y, button, pressed):
    if not pressed and button == mouse.Button.middle:
        workout.enough = True
        return False


def play_wav(src):
    wav_file = sys.path[0] + '\\static\\wav\\' + src + '.wav'
    try:
        wav = pyglet.media.load(wav_file)
        wav.play()
        time.sleep(wav.duration)
    except FileNotFoundError:
        print('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', wav_file)


def play_wav_inline(src):
    wav_file = sys.path[0] + '\\static\\wav\\' + src + '.wav'
    try:
        wav = pyglet.media.load(wav_file)
        wav.play()
    except FileNotFoundError:
        print('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', wav_file)


def correct_numerals(phrase, morph=pymorphy2.MorphAnalyzer()):
    """—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ —Ä–æ–¥–∞–º —Å–æ —Å–ª–æ–≤–∞–º–∏ —Å—Ç–æ—è—â–∏–º–∏ –∑–∞ –Ω–∏–º–∏: –¥–≤–∞-–¥–≤–µ """
    new_phrase = []
    py_gen = 1
    phrase = phrase.split(' ')
    while phrase:
        word = phrase.pop(-1)
        if 'NUMB' in morph.parse(word)[0].tag:
            new_phrase.append(pytils.numeral.sum_string(int(word), py_gen))
        else:
            new_phrase.append(word)
        py_gen = pytils.numeral.FEMALE if 'femn' in morph.parse(word)[0].tag else pytils.numeral.MALE
    return ' '.join(new_phrase[::-1])


def nums(phrase, morph=pymorphy2.MorphAnalyzer()):
    """ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Å —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–º–∏, —Å—Ç–æ—è—â–∏–º–∏ –ø–µ—Ä–µ–¥ –Ω–∏–º–∏: 1 –º–∏–Ω—É—Ç–∞, 2 –º–∏–Ω—É—Ç—ã """
    phrase = phrase.replace('  ', ' ').replace(',', ' ,')
    numeral = ''
    new_phrase = []
    for word in phrase.split(' '):
        if 'NUMB' in morph.parse(word)[0].tag:
            numeral = word
        if numeral:
            word = str(morph.parse(word)[0].make_agree_with_number(abs(int(numeral))).word)
        new_phrase.append(word)

    return ' '.join(new_phrase).replace(' ,', ',')


def db_record(seconds):
    """ –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–æ–≤ —Ä–∞—É–Ω–¥–∞ –≤ –±–¥ """
    connection = pymysql.connect('localhost', 'assistant', APIKeysLocal.mysql_pass, 'assistant')
    try:
        with connection.cursor() as cursor:
            # Read a single record
            sql = 'INSERT INTO `whm_breath` (`timeBreath`, `result`) VALUES (NOW(), {})'.format(seconds)
            cursor.execute(sql)
            connection.commit()
    finally:
        connection.close()


class Workout:
    mouse_coords = (0, 0)

    def __init__(self, breaths=30, hold=15):
        self.breaths = breaths
        self.hold = hold
        self.round_times = []
        self.enough = False  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–ª–∞–≥–∞
        self.lock = threading.Lock()  # –≤–∑–∞–∏–º–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤

    def __str__(self):
        return '\nüó£{} ‚è±{}'.format(self.breaths, self.hold)

    def __hold_breath(self, round):
        """ –ó–∞–¥–µ—Ä–∂–∫–∞ –¥—ã—Ö–∞–Ω–∏—è –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–º–µ—â–µ–Ω–∏–∏ –º—ã—à–∏ –Ω–∞ 20 –ø–∏–∫—Å–µ–ª–µ–π"""
        start_time = time.time()
        with mouse.Listener(on_move=on_move) as listener:
            listener.join()
        seconds = int(time.time() - start_time)
        db_record(seconds)
        self.mouse_coords = (0, 0)
        mins = seconds // 60
        secs = seconds % 60
        self.round_times.append(seconds)
        if round == 1:
            message = "{} –º–∏–Ω—É—Ç–∞ {} —Å–µ–∫—É–Ω–¥–∞".format(mins, secs)
        else:
            diff = self.round_times[round - 2] - self.round_times[round - 1]
            more = '–ü–ª—é—Å' if diff < 0 else '–ú–∏–Ω—É—Å'
            message = "{} {} —Å–µ–∫—É–Ω–¥–∞".format(more, abs(diff))
        play_wav_inline('gong')
        play_wav_inline('inhale')

        assistant.say('–ì–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö. ' + message)

    def __clock_tick(self):
        """ –æ—Ç—Å—á–µ—Ç 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏ –¥—ã—Ö–∞–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ —Ä–∞—É–Ω–¥–∞ """
        for i in range(self.hold):
            if i < self.hold - 4:
                time.sleep(1)
            else:
                play_wav('clock')
        play_wav_inline('gong2')

    def __breathe_round(self, round):
        """ –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞, —Å–ª—É—à–∞—é—â–µ–≥–æ –º—ã—à—å. –ï—Å–ª–∏ –æ–Ω–∞ —Å–º–µ—Å—Ç–∏–ª–∞—Å—å, –ø—Ä–µ–∫—Ä–∞—Ç–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É """
        t = threading.Thread(target=listen_mouse_click)
        t.start()

        """ —Ä–∞—É–Ω–¥ –¥–∞—Ö–∞–Ω–∏—è. –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∑–≤—É–∫ –¥—ã—Ö–∞–Ω–∏—è –∏ –∫–∞–∂–¥—ã–µ 10 –≤–¥–æ—Ö–æ–≤ –≥–æ–Ω–≥ """
        assistant.say('—Ä–∞—É–Ω–¥ ' + str(round))
        time.sleep(1)

        for i in range(self.breaths):
            if self.enough:
                t.join()
                return
            if i % 10 == 0:
                play_wav_inline('bronze_bell')
            play_wav('inhale')
            if i == self.breaths - 1:
                play_wav_inline('gong3')
            print(i + 1, end=' ')
            play_wav('exhale')

        assistant.say('–í—ã–¥–æ—Ö. –ó–∞–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥—ã—Ö–∞–Ω–∏–µ')
        self.__hold_breath(round)
        # assistant.say('–î–µ—Ä–∂–∏–º ' + nums(str(self.hold) + ' —Å–µ–∫—É–Ω–¥–∞'))
        self.__clock_tick()
        play_wav_inline('exhale')
        assistant.say('–í—ã–¥–æ—Ö')
        time.sleep(1.7)

    def __finish(self):
        assistant.say('–ó–∞–≤–µ—Ä—à–∞–µ–º –≥–∏–º–Ω–∞—Å—Ç–∏–∫—É.')
        self.statistics()
        # time.sleep(6)  # —á—Ç–æ–±—ã –¥–æ–∑–≤—É—á–∞–ª –≥–æ–Ω–≥
        # sys.exit(0)

    def breathe(self, rounds=None):
        play_wav_inline('gong')
        """ –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥—ã—Ö–∞–Ω–∏—è, –∑–∞–ø—É—Å–∫ —Ä–∞—É–Ω–¥–æ–≤ """
        if rounds:
            assistant.say(f'–í—ã–ø–æ–ª–Ω—è–µ–º {rounds}  —Ä–∞—É–Ω–¥')
        else:
            assistant.say('–í—ã–ø–æ–ª–Ω—è–µ–º –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—É—é –≥–∏–º–Ω–∞—Å—Ç–∏–∫—É')
        assistant.say(f'–ö–∞–∂–¥—ã–π —Ä–∞—É–Ω–¥ —ç—Ç–æ {self.breaths} –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö - –∏ —Å–ø–æ–∫–æ–π–Ω—ã–π –≤—ã–¥–æ—Ö')
        assistant.say('–ß—É—Ç—å –ø–æ–∑–∂–µ –ø–æ–¥–ø—Ä–∞–≤–ª—é.')
        print('* –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É - –∫–ª–∏–∫ —Å—Ä–µ–¥–Ω–µ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏')
        print('** –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å—á—ë—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ –¥—ã—Ö–∞–Ω–∏—è, –ø–æ–¥–≤–∏–≥–∞–π –º—ã—à–∫—É')
        time.sleep(2)
        assistant.say('–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏—Å—å...')
        time.sleep(1)
        i = 1
        while self.enough is not True:
            self.__breathe_round(i)
            i += 1
        self.__finish()

    def statistics(self):
        """ –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–µ–∫—É—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ"""
        if self.round_times:
            assistant.say('–ú–æ–ª–æ–¥–µ—Ü, —Å–ø–∞—Å–∏–±–æ.')
            if len(self.round_times) > 1:
                ave = int(sum(self.round_times) / len(self.round_times))
                assistant.say(f'–í—Å–µ–≥–æ {len(self.round_times)} —Ä–∞—É–Ω–¥')
                assistant.say('–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {} –º–∏–Ω—É—Ç–∞ {} —Å–µ–∫—É–Ω–¥–∞'.format(ave // 60, ave % 60))
            maxi = max(self.round_times)
            assistant.say('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {} –º–∏–Ω—É—Ç–∞ {} —Å–µ–∫—É–Ω–¥–∞'.format(maxi // 60, maxi % 60))


workout = Workout()


if __name__ == "__main__":
    """ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—É–Ω–¥–æ–≤ –∏–∑ –≤–Ω–µ—à–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã """
    rounds = int(sys.argv[1]) if len(sys.argv) == 2 and type(sys.argv[1]) == str else None

    workout.breathe(rounds)
